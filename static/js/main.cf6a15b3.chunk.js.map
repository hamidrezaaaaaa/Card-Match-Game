{"version":3,"sources":["constants/index.js","components/Card.jsx","services/GameService.js","components/GameBoard.jsx","components/Banner.jsx","App.jsx","index.js"],"names":["CARD_SIZES","GAME_STATUS","CARD_STATUS","useStyles","createUseStyles","card","padding","borderRadius","height","width","border","position","transition","transformStyle","margin","backfaceVisibility","selected","borderColor","transform","front","matched","backgroundColor","back","top","left","Card","data","handleClick","index","useState","isLoaded","setIsLoaded","id","url","status","classes","isSelected","isMatched","className","classnames","onClick","src","alt","onLoad","BASE_URL","gameService","a","getRandomUrls","urls","deck","concat","length","pop","shuffledDeck","sort","Math","random","fetchImages","page","apiUrl","fetch","res","json","urlArray","imageSet","Set","floor","urlList","size","ceil","DECK_SIZE","i","has","add","push","board","display","gridTemplateColumns","justifyItems","GameBoard","gameStatus","onGameUpdate","setDeck","isChecking","setIsChecking","firstCard","setFirstCard","secondCard","setSecondCard","faceUpCounter","setFaceUpCounter","flipCounter","useRef","startTime","setStartTime","checkPair","useCallback","first","second","newDeck","setTimeout","resetCards","current","newCount","newCard","toggleCard","flipAllCards","prevDeck","lastCard","Object","keys","find","key","remainder","checkGameFinished","console","log","filter","flips","time","Date","initialiseGame","GameService","useEffect","entries","map","value","root","background","alignItems","button","Banner","onReset","results","header","textAlign","footer","fontFamily","App","setGameStatus","gameResults","setGameResults","handleStatusUpdate","newStatus","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf6a15b3.chunk.js","sourcesContent":["export const CARD_SIZES = { width: 150, height: 250 };\r\nexport const DECK_SIZE = 15;\r\nexport const API_PAGE_SIZE = 10;\r\n\r\nexport const GAME_STATUS = {\r\n  IN_PROGRESS: \"IN_PROGRESS\",\r\n  LOADING: \"LOADING\",\r\n  CREATING: \"CREATING\",\r\n  CHECKING: \"CHECKING\",\r\n  RESETTING: \"RESETTING\",\r\n  FINISHED: \"FINISHED\"\r\n};\r\n\r\nexport const CARD_STATUS = {\r\n  SELECTED: \"SELECTED\",\r\n  MATCHED: \"MATCHED\",\r\n  HIDDEN: \"HIDDEN\"\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { CARD_STATUS, CARD_SIZES } from \"../constants\";\r\n\r\nconst useStyles = createUseStyles({\r\n  card: {\r\n    padding: 5,\r\n    borderRadius: 5,\r\n    height: CARD_SIZES.height,\r\n    width: CARD_SIZES.width,\r\n    border: \"black 5px solid\",\r\n    position: \"relative\",\r\n    transition: \"all 0.4s linear\",\r\n    transformStyle: \"preserve-3d\",\r\n    margin: \"5px\",\r\n    \"& div\": {\r\n      position: \"absolute\",\r\n      backfaceVisibility: \"hidden\",\r\n    },\r\n  },\r\n  selected: {\r\n    borderColor: \"blue\",\r\n    transform: \"rotateY(180deg)\",\r\n  },\r\n  front: {\r\n    transform: \"rotateY(180deg)\",\r\n  },\r\n  matched: {\r\n    borderColor: \"green\",\r\n    backgroundColor: \"white\",\r\n    transform: \"rotateY(180deg)\",\r\n  },\r\n  back: {\r\n    transform: \"rotateY(180deg)\",\r\n    top: \"25%\",\r\n    left: \"35%\",\r\n  },\r\n});\r\n\r\nconst Card = ({ data, handleClick, index }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  const { id, url, status } = data;\r\n  const classes = useStyles();\r\n  const isSelected = status === CARD_STATUS.SELECTED;\r\n  const isMatched = status === CARD_STATUS.MATCHED;\r\n\r\n  const onCardClick = () => {\r\n    if (status === CARD_STATUS.HIDDEN) {\r\n      handleClick(index, id);\r\n    }\r\n  };\r\n\r\n  const handleImageLoad = () => {\r\n    setIsLoaded(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classnames(classes.card, {\r\n        [classes.selected]: isSelected,\r\n        [classes.matched]: isMatched,\r\n      })}\r\n      onClick={onCardClick}\r\n    >\r\n      <div className={classes.front}>\r\n        <img src={url} alt=\"card\" onLoad={handleImageLoad} />\r\n      </div>\r\n      {data.id}\r\n      <div className={classes.back}>{!isLoaded && \"Loading\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { CARD_STATUS, DECK_SIZE, CARD_SIZES, API_PAGE_SIZE } from \"../constants\";\r\n\r\nconst BASE_URL = \"https://picsum.photos\";\r\n\r\n/**\r\n * Create new game\r\n */\r\nconst gameService = async () => {\r\n  const urls = await getRandomUrls();\r\n  const deck = urls.concat(urls);\r\n\r\n  while (deck.length > DECK_SIZE) {\r\n    deck.pop();\r\n  }\r\n\r\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random());\r\n\r\n  return shuffledDeck;\r\n};\r\n\r\nconst fetchImages = async (page) => {\r\n  const apiUrl = `${BASE_URL}/v2/list?page=${page}&limit=100`;\r\n  const res = await fetch(apiUrl);\r\n  const data = await res.json();\r\n\r\n  return data;\r\n}\r\n\r\nexport const getRandomUrls = async () => {\r\n  const urlArray = [];\r\n  const imageSet = new Set();\r\n  const page = Math.floor(Math.random() * API_PAGE_SIZE) + 1;\r\n  const urlList = await fetchImages(page);\r\n\r\n  // Randomly pick cards from list from API\r\n  while (imageSet.size < Math.ceil(DECK_SIZE / 2)) {\r\n    const i = Math.floor(Math.random() * urlList.length) + 1\r\n\r\n    if (urlList[i]) {\r\n      const { id } = urlList[i]\r\n\r\n      if (!imageSet.has(id)) {\r\n        imageSet.add(id)\r\n        urlArray.push({\r\n          id,\r\n          url: `${BASE_URL}/id/${id}/${CARD_SIZES.width}/${CARD_SIZES.height}`,\r\n          status: CARD_STATUS.HIDDEN,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return urlArray;\r\n};\r\n\r\nexport default gameService;\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nimport Card from \"./Card\";\r\nimport GameService from \"../services/GameService\";\r\nimport { CARD_STATUS, GAME_STATUS, DECK_SIZE } from \"../constants\";\r\n\r\nconst DELAY = 800;\r\n\r\nconst useStyles = createUseStyles({\r\n  board: {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\r\n    justifyItems: \"center\",\r\n  },\r\n});\r\n\r\nconst GameBoard = ({ gameStatus, onGameUpdate }) => {\r\n  const [deck, setDeck] = useState({});\r\n  const [isChecking, setIsChecking] = useState(false);\r\n  const [firstCard, setFirstCard] = useState(null);\r\n  const [secondCard, setSecondCard] = useState(null);\r\n  const [faceUpCounter, setFaceUpCounter] = useState(0);\r\n\r\n  const flipCounter = useRef(0);\r\n  const [startTime, setStartTime] = useState(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Check if the flipped cards match\r\n   */\r\n  const checkPair = useCallback(() => {\r\n    if (firstCard && secondCard) {\r\n      const first = { ...deck[firstCard.index] };\r\n      const second = { ...deck[secondCard.index] };\r\n\r\n      if (firstCard.id === secondCard.id) {\r\n        first.status = CARD_STATUS.MATCHED;\r\n        second.status = CARD_STATUS.MATCHED;\r\n      } else {\r\n        first.status = CARD_STATUS.HIDDEN;\r\n        second.status = CARD_STATUS.HIDDEN;\r\n      }\r\n\r\n      const newDeck = {\r\n        ...deck,\r\n        [firstCard.index]: first,\r\n        [secondCard.index]: second,\r\n      };\r\n\r\n      setTimeout(() => {\r\n        setDeck(newDeck);\r\n      }, DELAY);\r\n\r\n      setTimeout(resetCards, DELAY);\r\n    }\r\n  }, [deck, firstCard, secondCard]);\r\n\r\n  const resetCards = () => {\r\n    setFirstCard(null);\r\n    setSecondCard(null);\r\n    setIsChecking(false);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {*} index\r\n   * @param {*} status\r\n   */\r\n  const toggleCard = (index, status) => {\r\n    const newDeck = { ...deck };\r\n    const newCard = { ...newDeck[index] };\r\n\r\n    newCard.status = status;\r\n    newDeck[index] = newCard;\r\n\r\n    setDeck(newDeck);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {*} index\r\n   * @param {*} id\r\n   */\r\n  const handleClick = (index, id) => {\r\n    if (isChecking) return;\r\n\r\n    flipCounter.current++;\r\n\r\n    if (faceUpCounter < 2) {\r\n      const newCount = faceUpCounter + 1;\r\n      const newCard = { index, id };\r\n      setFaceUpCounter(newCount);\r\n\r\n      if (newCount === 1) {\r\n        setFirstCard(newCard);\r\n      } else {\r\n        setSecondCard(newCard);\r\n        setIsChecking(true);\r\n      }\r\n\r\n      toggleCard(index, CARD_STATUS.SELECTED);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Find odd card out and flip it\r\n   */\r\n  const flipAllCards = useCallback(() => {\r\n    setDeck((prevDeck) => {\r\n      const lastCard = Object.keys(deck).find(\r\n        (key) => deck[key].status === CARD_STATUS.HIDDEN\r\n      );\r\n\r\n      if (lastCard) {\r\n        const remainder = { ...deck[lastCard], status: CARD_STATUS.SELECTED };\r\n\r\n        const newDeck = {\r\n          ...deck,\r\n          [lastCard]: remainder,\r\n        };\r\n\r\n        return newDeck;\r\n      }\r\n\r\n      return prevDeck;\r\n    });\r\n  }, [deck]);\r\n\r\n  /**\r\n   * Check if the all cards are matched and game is finished\r\n   */\r\n  const checkGameFinished = useCallback(() => {\r\n    console.log(flipCounter.current);\r\n    if (faceUpCounter === 0) {\r\n      const matches = Object.keys(deck).filter(\r\n        (key) => deck[key].status === CARD_STATUS.MATCHED\r\n      );\r\n\r\n      // Game is finished\r\n      if (matches.length === DECK_SIZE - 1) {\r\n        onGameUpdate(GAME_STATUS.FINISHED, {\r\n          flips: flipCounter.current,\r\n          time: `${(new Date() - startTime) / 1000} seconds`,\r\n        });\r\n      }\r\n    } else if (faceUpCounter === 2) {\r\n      setFaceUpCounter(0);\r\n      checkPair();\r\n    }\r\n  }, [checkPair, deck, faceUpCounter, onGameUpdate, startTime]);\r\n\r\n  const initialiseGame = useCallback(async () => {\r\n    onGameUpdate(GAME_STATUS.LOADING);\r\n    setDeck(await GameService());\r\n    flipCounter.current = 0;\r\n    setStartTime(new Date());\r\n    onGameUpdate(GAME_STATUS.IN_PROGRESS);\r\n  }, [onGameUpdate]);\r\n\r\n  useEffect(() => {\r\n    console.log(gameStatus);\r\n    // Set up the game\r\n    if (gameStatus === GAME_STATUS.CREATING) {\r\n      initialiseGame();\r\n    } else if (gameStatus === GAME_STATUS.IN_PROGRESS) {\r\n      checkGameFinished();\r\n    } else if (gameStatus === GAME_STATUS.FINISHED) {\r\n      flipAllCards();\r\n    }\r\n  }, [checkGameFinished, initialiseGame, flipAllCards, gameStatus]);\r\n\r\n  return (\r\n    <div className={classes.board}>\r\n      {gameStatus === GAME_STATUS.LOADING\r\n        ? \"Loading...\"\r\n        : Object.entries(deck).map(([key, value]) => {\r\n            return (\r\n              <Card\r\n                key={key}\r\n                index={key}\r\n                data={value}\r\n                handleClick={handleClick}\r\n              />\r\n            );\r\n          })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport { GAME_STATUS } from \"../constants\";\r\n\r\nconst useStyles = createUseStyles({\r\n  root: {\r\n    position: \"fixed\",\r\n    display: \"grid\",\r\n    top: \"30%\",\r\n    left: \"25%\",\r\n    width: \"50%\",\r\n    height: 200,\r\n    background: \"aliceblue\",\r\n    justifyItems: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  button: {\r\n    background: \"white\",\r\n    border: \"solid 1px black\",\r\n    padding: \"1em 2em\",\r\n  },\r\n});\r\n\r\nconst Banner = ({ onReset, results }) => {\r\n  const classes = useStyles();\r\n\r\n  const handleReset = () => {\r\n    onReset(GAME_STATUS.CREATING);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>Congratulations, you've won!</div>\r\n      <div>\r\n        <div>\r\n          <b>Cards flipped:</b>\r\n          {results.flips} times\r\n        </div>\r\n        <div>\r\n          <b>Time taken:</b> {results.time}\r\n        </div>\r\n      </div>\r\n      <button className={classes.button} onClick={handleReset}>\r\n        Play Again\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport Banner from \"./components/Banner\";\r\n\r\nimport { GAME_STATUS } from \"./constants\";\r\n\r\nconst useStyles = createUseStyles({\r\n  header: {\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    textAlign: \"center\",\r\n  },\r\n  root: {\r\n    fontFamily: \"arial\",\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const [gameStatus, setGameStatus] = useState(GAME_STATUS.CREATING);\r\n  const [gameResults, setGameResults] = useState({});\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleStatusUpdate = (newStatus, results) => {\r\n    setGameStatus(newStatus);\r\n    if (newStatus === GAME_STATUS.FINISHED) {\r\n      setGameResults(results);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <header className={classes.header}>\r\n        <h1>Card Match Game</h1>\r\n      </header>\r\n      <div>\r\n        <GameBoard gameStatus={gameStatus} onGameUpdate={handleStatusUpdate} />\r\n        {gameStatus === GAME_STATUS.FINISHED && (\r\n          <Banner onReset={handleStatusUpdate} results={gameResults} />\r\n        )}\r\n      </div>\r\n      <footer className={classes.footer}>\r\n        Created by <a href=\"https://www.kazyamada.com/\">Kaz Yamada</a> |{\" \"}\r\n        <a href=\"https://github.com/kaz-yamada/Card-Match-Game\">Source</a>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'; \r\n\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();"],"sourceRoot":""}